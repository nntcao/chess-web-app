{"ast":null,"code":"const isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isLocationWithinBounds = (letter, number) => {\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n    console.log(newChessBoard[letterIndexToShow][numberIndexToShow]);\n  }\n\n  return newChessBoard;\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      if (isLocationWithinBounds(letter + i, number + j)) {\n        if (!isPieceAtPosition(chessBoard, letter + i, number + j)) possibleMoves.push([letter + i, number + j]);\n      }\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  if (chessPiece.color === 'l') {\n    if (number === 2) {\n      if (isLocationWithinBounds(letter, number + 2)) {\n        if (!isPieceAtPosition(chessBoard, letter, number + 2)) {\n          possibleMoves.push([letter, number + 2]);\n        }\n      }\n    }\n\n    if (isLocationWithinBounds(letter, number + 1)) {\n      if (!isPieceAtPosition(chessBoard, letter, number + 1)) {\n        possibleMoves.push([letter, number + 1]);\n      }\n    }\n  } else {}\n\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMovesKing,\n  getPossibleMovesPawn\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["isPieceAtPosition","chessBoard","letter","number","piece","type","isLocationWithinBounds","showPossibleMoves","possibleMovesToShow","setChessBoard","newChessBoard","i","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","console","log","getPossibleMovesKing","possibleMoves","j","push","getPossibleMovesPawn","chessPiece","color"],"mappings":"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","sourcesContent":["const isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isLocationWithinBounds = (letter, number) => {\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n        console.log(newChessBoard[letterIndexToShow][numberIndexToShow]); \r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n        if (isLocationWithinBounds(letter + i, number + j)) {\r\n            if (!isPieceAtPosition(chessBoard, letter + i, number + j))\r\n            possibleMoves.push([letter + i, number + j])\r\n        }\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    if (chessPiece.color === 'l') {\r\n        if (number === 2) {\r\n            if (isLocationWithinBounds(letter, number + 2)) {\r\n                if (!isPieceAtPosition(chessBoard, letter, number + 2)) {\r\n                    possibleMoves.push([letter, number + 2])\r\n                }\r\n            }\r\n        }\r\n        if (isLocationWithinBounds(letter, number + 1)) {\r\n            if (!isPieceAtPosition(chessBoard, letter, number + 1)) {\r\n                possibleMoves.push([letter, number + 1])\r\n            }\r\n        }\r\n    }\r\n    else {}\r\n\r\n    return possibleMoves \r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMovesKing,\r\n    getPossibleMovesPawn\r\n}"]},"metadata":{},"sourceType":"module"}