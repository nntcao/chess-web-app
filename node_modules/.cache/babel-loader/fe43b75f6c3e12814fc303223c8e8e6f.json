{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\";\nimport './ChessApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChessApp;\n\nconst initializeChessBoard = () => {\n  const board = {};\n  const letterIds = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8];\n  var dark = true;\n\n  for (var letter of letterIds) {\n    const squares = {};\n\n    for (var number of numberIds) {\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: null\n      };\n      dark = !dark;\n    }\n\n    dark = !dark;\n    board[letter] = squares;\n  }\n\n  return board;\n};\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()];\n  console.log(chessBoard);\n  console.log(chessBoard['a']['1']);\n  const squarePx = 50;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      squarePx: squarePx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ChessBoard;\n\nconst DrawBoard = _ref => {\n  let {\n    chessBoard,\n    squarePx\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateRows: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n    },\n    children: Object.keys(chessBoard).map(letter => {\n      return /*#__PURE__*/_jsxDEV(DrawSquares, {\n        letter: letter,\n        chessBoard: chessBoard,\n        squarePx: squarePx\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = DrawBoard;\n\nconst DrawSquares = _ref2 => {\n  let {\n    letter,\n    chessBoard,\n    squarePx,\n    drawCol\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n    },\n    children: Object.keys(chessBoard[letter]).map(number => {\n      const styleSquare = {\n        backgroundColor: chessBoard[letter][number].color,\n        gridColStart: drawCol,\n        gridColEnd: drawCol + 1\n      };\n      drawCol++;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styleSquare,\n        children: [letter, number]\n      }, `${letter}${number}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = DrawSquares;\nexport default ChessApp;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ChessApp\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"DrawBoard\");\n$RefreshReg$(_c4, \"DrawSquares\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["ChessApp","initializeChessBoard","board","letterIds","numberIds","dark","letter","squares","number","color","piece","ChessBoard","chessBoard","setChessBoard","console","log","squarePx","DrawBoard","display","gridTemplateRows","Object","keys","map","DrawSquares","drawCol","gridTemplateColumns","styleSquare","backgroundColor","gridColStart","gridColEnd"],"mappings":"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","sourcesContent":["import './ChessApp.css';\n\nconst ChessApp = () => {\n  return (\n    <div>\n      <ChessBoard />\n    </div>\n  )\n}\n\nconst initializeChessBoard = () => {\n  const board = {}\n  const letterIds = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8]\n  var dark = true\n  for (var letter of letterIds) {\n    const squares = {}\n    for (var number of numberIds) {\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: null\n      }\n      dark = !dark\n    }\n    dark = !dark\n    board[letter] = squares\n  }\n  return board\n}\n\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()]\n\n  console.log(chessBoard)\n  console.log(chessBoard['a']['1']);\n\n  const squarePx = 50\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} squarePx={squarePx}/>\n    </div>\n  )\n}\n\nconst DrawBoard = ({ chessBoard, squarePx }) => {\n  return (\n    <div style={{display:'grid', gridTemplateRows:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n      {Object.keys(chessBoard).map(letter => {\n        return (\n          <DrawSquares key={letter} letter={letter} chessBoard={chessBoard} squarePx={squarePx}/>\n        )\n      })}\n    </div>\n  )\n}\n\nconst DrawSquares = ({ letter, chessBoard, squarePx, drawCol }) => {\n  return (\n    <div style={{display:'grid', gridTemplateColumns:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n      {Object.keys(chessBoard[letter]).map(number => {\n        const styleSquare = {\n          backgroundColor: chessBoard[letter][number].color,\n          gridColStart: drawCol,\n          gridColEnd: drawCol + 1\n        }\n        drawCol++\n        return (\n          <div key={`${letter}${number}`} style={styleSquare}>\n            {letter}{number}\n          </div>\n        )\n      })}\n    </div>\n  )\n\n}\n\nexport default ChessApp"]},"metadata":{},"sourceType":"module"}