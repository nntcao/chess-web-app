{"ast":null,"code":"import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\n\nconst isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\n    return false;\n  }\n\n  return true;\n};\n\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\n  var kingCoords = findKingOfColor(chessBoard, colorTurn);\n  var colorOpposite = colorTurn === 'l' ? 'd' : 'l';\n\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (isPieceAtPosition(chessBoard, i, j)) {\n        if (chessBoard[i][j].piece.color === colorOpposite) {\n          var possibleMoves = getPossibleMoves(chessBoard, i, j, false);\n\n          if (possibleMoves !== null) {\n            if (possibleMoves.some(coord => coord[0] === kingCoords[0] && coord[1] === kingCoords[1])) {\n              console.log(kingCoords);\n              console.log(i, j, 'is not valid');\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nconst findKingOfColor = (chessBoard, color) => {\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (chessBoard[i][j].piece !== null) {\n        if (chessBoard[i][j].piece.type === 'k') {\n          if (chessBoard[i][j].piece.color === color) {\n            return [i, j];\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves, verifyPossible) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n\n  if (isLocationWithinBounds(toMove)) {\n    if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {\n      var chessPiece = chessBoard[current[0]][current[1]].piece;\n      var newChessBoard = JSON.parse(JSON.stringify(chessBoard));\n      newChessBoard[current[0]][current[1]].piece = {\n        type: null,\n        color: null\n      };\n      newChessBoard[letter][number].piece = chessPiece;\n\n      if (verifyPossible) {\n        if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n          possibleMoves.push([letter, number]);\n        }\n      } else {\n        possibleMoves.push([letter, number]);\n      }\n    }\n  }\n};\n\nconst isLocationWithinBounds = toMove => {\n  var letter = toMove[0];\n  var number = toMove[1];\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n  }\n\n  return newChessBoard;\n};\n\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves, verifyPossible) => {\n  if (isLocationWithinBounds(toMove)) {\n    var letter = toMove[0];\n    var number = toMove[1];\n    var chessPiece = chessBoard[current[0]][current[1]].piece;\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard));\n    newChessBoard[current[0]][current[1]].piece = {\n      type: null,\n      color: null\n    };\n    newChessBoard[letter][number].piece = chessPiece;\n    console.log(toMove);\n\n    if (!isPieceAtPosition(chessBoard, letter, number)) {\n      if (verifyPossible) {\n        if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n          possibleMoves.push([letter, number]);\n          return true;\n        }\n      } else {\n        possibleMoves.push([letter, number]);\n        return true;\n      }\n    } else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\n      if (chessPiece.type !== 'p') {\n        if (verifyPossible) {\n          if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n            possibleMoves.push([letter, number]);\n            return false;\n          }\n        } else {\n          possibleMoves.push([letter, number]);\n          return false;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves, verifyPossible) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves, verifyPossible)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves, verifyPossible)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i], possibleMoves, verifyPossible)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves), verifyPossible) {\n      break;\n    }\n  }\n};\n\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, verifyPossible) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves), verifyPossible) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves), verifyPossible) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves), verifyPossible) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves), verifyPossible) {\n      break;\n    }\n  }\n};\n\nconst getPossibleMovesKnight = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n  const checkPositions = [[letter + 2, number - 1], [letter + 2, number + 1], [letter - 2, number - 1], [letter - 2, number + 1], [letter - 1, number - 2], [letter + 1, number - 2], [letter - 1, number + 2], [letter + 1, number + 2]];\n\n  for (var i = 0; i < checkPositions.length; i++) {\n    addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves, verifyPossible);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesBishop = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkDiagonals(chessBoard, letter, number, possibleMoves, verifyPossible);\n  return possibleMoves;\n};\n\nconst getPossibleMovesRook = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, verifyPossible);\n  return possibleMoves;\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves, verifyPossible);\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n\n  if (chessBoard[letter][number].piece.color === 'l') {\n    if (number === 2 && chessBoard[letter][number + 1].piece.type === null) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves, verifyPossible);\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves, verifyPossible);\n    } else {\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves, verifyPossible);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves, verifyPossible);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves, verifyPossible);\n  } else {\n    if (number === 7 && chessBoard[letter][number - 1].piece.type === null) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves, verifyPossible);\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves, verifyPossible);\n    } else {\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves, verifyPossible);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves, verifyPossible);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves, verifyPossible);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesQueen = (chessBoard, letter, number, verifyPossible) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece, verifyPossible);\n  checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece, verifyPossible);\n  return possibleMoves;\n};\n\nconst getPossibleMoves = function (chessBoard, letter, number) {\n  let verifyPossible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var possibleMoves = [];\n\n  switch (chessBoard[letter][number].piece.type) {\n    case null:\n      break;\n\n    case 'k':\n      possibleMoves = getPossibleMovesKing(chessBoard, letter, number, verifyPossible);\n      break;\n\n    case 'q':\n      possibleMoves = getPossibleMovesQueen(chessBoard, letter, number, verifyPossible);\n      break;\n\n    case 'b':\n      possibleMoves = getPossibleMovesBishop(chessBoard, letter, number, verifyPossible);\n      break;\n\n    case 'n':\n      possibleMoves = getPossibleMovesKnight(chessBoard, letter, number, verifyPossible);\n      break;\n\n    case 'r':\n      possibleMoves = getPossibleMovesRook(chessBoard, letter, number, verifyPossible);\n      break;\n\n    case 'p':\n      possibleMoves = getPossibleMovesPawn(chessBoard, letter, number, verifyPossible);\n      break;\n\n    default:\n      break;\n  }\n\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMoves\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["getSpaceUntilMaxLength","isPieceAtPosition","chessBoard","letter","number","piece","type","isEnemyPieceAtPosition","current","toMove","color","checkValidChessBoard","colorTurn","kingCoords","findKingOfColor","colorOpposite","i","j","possibleMoves","getPossibleMoves","some","coord","console","log","addCapturablePiecesPawn","verifyPossible","isLocationWithinBounds","chessPiece","newChessBoard","JSON","parse","stringify","push","showPossibleMoves","possibleMovesToShow","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","addPossibleMove","checkDiagonals","checkVertHori","getPossibleMovesKnight","checkPositions","getPossibleMovesBishop","getPossibleMovesRook","getPossibleMovesKing","getPossibleMovesPawn","getPossibleMovesQueen"],"mappings":"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","sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\"\r\n\r\nconst isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\r\n    var kingCoords = findKingOfColor(chessBoard, colorTurn)\r\n    var colorOpposite = colorTurn === 'l' ? 'd' : 'l'\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            \r\n            if (isPieceAtPosition(chessBoard, i, j)) {\r\n                if (chessBoard[i][j].piece.color === colorOpposite) {\r\n                    var possibleMoves = getPossibleMoves(chessBoard, i, j, false)\r\n                    if (possibleMoves !== null) {\r\n                        if (possibleMoves.some(coord => coord[0] === kingCoords[0] && coord[1] === kingCoords[1])) {\r\n                            console.log(kingCoords);\r\n                            console.log(i, j, 'is not valid')\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst findKingOfColor = (chessBoard, color) => {\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (chessBoard[i][j].piece !== null) {\r\n                if (chessBoard[i][j].piece.type === 'k') {\r\n                    if (chessBoard[i][j].piece.color === color) {\r\n                        return [i, j]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves, verifyPossible) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    if (isLocationWithinBounds(toMove)) {\r\n        if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {        \r\n            var chessPiece = chessBoard[current[0]][current[1]].piece\r\n            var newChessBoard = JSON.parse(JSON.stringify(chessBoard))\r\n            newChessBoard[current[0]][current[1]].piece = {\r\n                type: null,\r\n                color: null,\r\n            }\r\n            newChessBoard[letter][number].piece = chessPiece\r\n            if (verifyPossible) {\r\n                if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                    possibleMoves.push([letter, number])\r\n                }\r\n            } else {\r\n                possibleMoves.push([letter, number])\r\n            }\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nconst isLocationWithinBounds = (toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves, verifyPossible) => {\r\n    if (isLocationWithinBounds(toMove)) {\r\n        var letter = toMove[0]\r\n        var number = toMove[1]\r\n    \r\n        var chessPiece = chessBoard[current[0]][current[1]].piece\r\n        var newChessBoard = JSON.parse(JSON.stringify(chessBoard))\r\n        newChessBoard[current[0]][current[1]].piece = {\r\n            type: null,\r\n            color: null,\r\n        }\r\n        newChessBoard[letter][number].piece = chessPiece\r\n        console.log(toMove);\r\n        if (!isPieceAtPosition(chessBoard, letter, number)) {\r\n            if (verifyPossible) {\r\n                if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                    possibleMoves.push([letter, number])\r\n                    return true\r\n                }\r\n            } \r\n            else {\r\n                possibleMoves.push([letter, number])\r\n                return true\r\n            }\r\n        }\r\n        else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\r\n            if (chessPiece.type !== 'p') {\r\n                if (verifyPossible) {\r\n                    if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                        possibleMoves.push([letter, number])\r\n                        return false\r\n                    }\r\n                } \r\n                else {\r\n                    possibleMoves.push([letter, number])\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves, verifyPossible) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves, verifyPossible)) {\r\n            break\r\n        }\r\n\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves, verifyPossible)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i] , possibleMoves, verifyPossible)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves), verifyPossible) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, verifyPossible) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves), verifyPossible) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves), verifyPossible) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves), verifyPossible) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves), verifyPossible) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKnight = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n    const checkPositions = [\r\n        [letter + 2, number - 1], [letter + 2, number + 1], \r\n        [letter - 2, number - 1], [letter - 2, number + 1],\r\n        [letter - 1, number - 2], [letter + 1, number - 2],\r\n        [letter - 1, number + 2], [letter + 1, number + 2]\r\n    ]\r\n\r\n    for (var i = 0; i < checkPositions.length; i++) {\r\n        addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves, verifyPossible)\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesBishop = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, verifyPossible)    \r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesRook = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, verifyPossible)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves, verifyPossible)\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n    if (chessBoard[letter][number].piece.color === 'l') {\r\n        if (number === 2 && chessBoard[letter][number + 1].piece.type === null) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves, verifyPossible)\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves, verifyPossible) \r\n        } else {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves, verifyPossible)\r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves, verifyPossible)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves, verifyPossible)\r\n    }\r\n    else {\r\n        if (number === 7 && chessBoard[letter][number - 1].piece.type === null) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves, verifyPossible)\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves, verifyPossible) \r\n        } else {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves, verifyPossible)\r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves, verifyPossible)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves, verifyPossible)\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesQueen = (chessBoard, letter, number, verifyPossible) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece, verifyPossible)\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece, verifyPossible)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMoves = (chessBoard, letter, number, verifyPossible=true) => {\r\n    var possibleMoves = []\r\n    switch (chessBoard[letter][number].piece.type) {\r\n        case null:\r\n            break;\r\n        case 'k':\r\n            possibleMoves = getPossibleMovesKing(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        case 'q':\r\n            possibleMoves = getPossibleMovesQueen(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        case 'b':\r\n            possibleMoves = getPossibleMovesBishop(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        case 'n':\r\n            possibleMoves = getPossibleMovesKnight(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        case 'r':\r\n            possibleMoves = getPossibleMovesRook(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        case 'p':\r\n            possibleMoves = getPossibleMovesPawn(chessBoard, letter, number, verifyPossible)\r\n            break;\r\n        default:\r\n           break;\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMoves\r\n}"]},"metadata":{},"sourceType":"module"}