{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\",\n    _s = $RefreshSig$();\n\nimport './css/ChessApp.css';\nimport { useState } from 'react';\nimport DrawBoard from './components/DrawBoard';\nimport ChessLogicManager from './managers/ChessLogicManager';\nimport InitializerManager from './managers/InitializerManager';\nimport ChessBoardManager from './managers/ChessBoardManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  _s();\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard());\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [squareClicked, setSquareClicked] = useState(null);\n\n  const onPieceClickHandler = (letter, number) => {\n    letter = parseInt(letter);\n    number = parseInt(number);\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)); // deep clone chessBoard\n\n    const chessSquare = chessBoard[letter][number];\n    const chessPiece = chessSquare.piece;\n\n    if (squareClicked !== null && chessSquare.indicatorMoveHere === true) {\n      newChessBoard[letter][number].piece = chessBoard[squareClicked[0]][squareClicked[1]].piece;\n      newChessBoard[squareClicked[0]][squareClicked[1]].piece = null;\n      setChessBoard(newChessBoard);\n      setSquareClicked([letter, number]);\n    } else {\n      var possibleMoves = [];\n      ChessBoardManager.clearBoard(newChessBoard); // newChessBoard[letter][number].clicked = true\n\n      switch (chessPiece.type) {\n        case null:\n          break;\n\n        case 'k':\n          possibleMoves = ChessLogicManager.getPossibleMovesKing(newChessBoard, letter, number);\n          break;\n\n        case 'q':\n          break;\n\n        case 'b':\n          break;\n\n        case 'n':\n          break;\n\n        case 'r':\n          break;\n\n        case 'p':\n          possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number);\n          newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves);\n          break;\n\n        default:\n          break;\n      }\n\n      console.log(newChessBoard);\n      setChessBoard(newChessBoard);\n      setSquareClicked[[letter, number]];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      onPieceClickHandler: onPieceClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChessApp, \"A7M/E+d1B8mkPos4ygi2so1B4Yw=\");\n\n_c = ChessApp;\nexport default ChessApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessApp\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["useState","DrawBoard","ChessLogicManager","InitializerManager","ChessBoardManager","ChessApp","chessBoard","setChessBoard","initializeChessBoard","isWhiteTurn","setIsWhiteTurn","squareClicked","setSquareClicked","onPieceClickHandler","letter","number","parseInt","newChessBoard","JSON","parse","stringify","chessSquare","chessPiece","piece","indicatorMoveHere","possibleMoves","clearBoard","type","getPossibleMovesKing","getPossibleMovesPawn","showPossibleMoves","console","log"],"mappings":";;;AAAA,OAAO,oBAAP;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACG,kBAAkB,CAACK,oBAAnB,EAAD,CAA5C;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,IAAD,CAAlD;;AAEA,QAAMa,mBAAmB,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC9CD,IAAAA,MAAM,GAAGE,QAAQ,CAACF,MAAD,CAAjB;AACAC,IAAAA,MAAM,GAAGC,QAAQ,CAACD,MAAD,CAAjB;AAEA,QAAIE,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,UAAf,CAAX,CAApB,CAJ8C,CAIa;;AAE3D,UAAMe,WAAW,GAAGf,UAAU,CAACQ,MAAD,CAAV,CAAmBC,MAAnB,CAApB;AACA,UAAMO,UAAU,GAAGD,WAAW,CAACE,KAA/B;;AAEA,QAAIZ,aAAa,KAAK,IAAlB,IAA0BU,WAAW,CAACG,iBAAZ,KAAkC,IAAhE,EAAsE;AAClEP,MAAAA,aAAa,CAACH,MAAD,CAAb,CAAsBC,MAAtB,EAA8BQ,KAA9B,GAAsCjB,UAAU,CAACK,aAAa,CAAC,CAAD,CAAd,CAAV,CAA6BA,aAAa,CAAC,CAAD,CAA1C,EAA+CY,KAArF;AACAN,MAAAA,aAAa,CAACN,aAAa,CAAC,CAAD,CAAd,CAAb,CAAgCA,aAAa,CAAC,CAAD,CAA7C,EAAkDY,KAAlD,GAA0D,IAA1D;AAEAhB,MAAAA,aAAa,CAACU,aAAD,CAAb;AACAL,MAAAA,gBAAgB,CAAC,CAACE,MAAD,EAASC,MAAT,CAAD,CAAhB;AACH,KAND,MAOK;AACH,UAAIU,aAAa,GAAG,EAApB;AAEArB,MAAAA,iBAAiB,CAACsB,UAAlB,CAA6BT,aAA7B,EAHG,CAIH;;AACA,cAAQK,UAAU,CAACK,IAAnB;AACE,aAAK,IAAL;AACE;;AACF,aAAK,GAAL;AACEF,UAAAA,aAAa,GAAGvB,iBAAiB,CAAC0B,oBAAlB,CAAuCX,aAAvC,EAAsDH,MAAtD,EAA8DC,MAA9D,CAAhB;AACA;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACE;;AACF,aAAK,GAAL;AACEU,UAAAA,aAAa,GAAGvB,iBAAiB,CAAC2B,oBAAlB,CAAuCZ,aAAvC,EAAsDH,MAAtD,EAA8DC,MAA9D,CAAhB;AACAE,UAAAA,aAAa,GAAGf,iBAAiB,CAAC4B,iBAAlB,CAAoCb,aAApC,EAAmDQ,aAAnD,CAAhB;AACA;;AACF;AACE;AAnBJ;;AAqBAM,MAAAA,OAAO,CAACC,GAAR,CAAYf,aAAZ;AACAV,MAAAA,aAAa,CAACU,aAAD,CAAb;AACAL,MAAAA,gBAAgB,CAAC,CAACE,MAAD,EAASC,MAAT,CAAD,CAAhB;AACD;AACF,GA9CD;;AAgDA,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,UAAU,EAAET,UAAvB;AAAmC,MAAA,mBAAmB,EAAEO;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA5DD;;GAAMR,Q;;KAAAA,Q;AA+DN,eAAeA,QAAf","sourcesContent":["import './css/ChessApp.css';\n\nimport { useState } from 'react'\nimport DrawBoard from './components/DrawBoard'\nimport ChessLogicManager from './managers/ChessLogicManager'\nimport InitializerManager from './managers/InitializerManager'\nimport ChessBoardManager from './managers/ChessBoardManager'\n\nconst ChessApp = () => {\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard())\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true)\n  const [squareClicked, setSquareClicked] = useState(null)\n\n  const onPieceClickHandler = (letter, number) => {\n    letter = parseInt(letter)\n    number = parseInt(number)\n\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)) // deep clone chessBoard\n\n    const chessSquare = chessBoard[letter][number]\n    const chessPiece = chessSquare.piece\n\n    if (squareClicked !== null && chessSquare.indicatorMoveHere === true) {\n        newChessBoard[letter][number].piece = chessBoard[squareClicked[0]][squareClicked[1]].piece\n        newChessBoard[squareClicked[0]][squareClicked[1]].piece = null\n        \n        setChessBoard(newChessBoard)\n        setSquareClicked([letter, number])\n    }\n    else {\n      var possibleMoves = []\n\n      ChessBoardManager.clearBoard(newChessBoard)\n      // newChessBoard[letter][number].clicked = true\n      switch (chessPiece.type) {\n        case null:\n          break;\n        case 'k':\n          possibleMoves = ChessLogicManager.getPossibleMovesKing(newChessBoard, letter, number)\n          break;\n        case 'q':\n          break;\n        case 'b':\n          break;\n        case 'n':\n          break;\n        case 'r':\n          break;\n        case 'p':\n          possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number)\n          newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves)\n          break;\n        default:\n          break;\n      }\n      console.log(newChessBoard)\n      setChessBoard(newChessBoard)\n      setSquareClicked[[letter, number]]\n    }\n  }\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} onPieceClickHandler={onPieceClickHandler}/>\n    </div>\n  )\n\n}\n\n\nexport default ChessApp\n"]},"metadata":{},"sourceType":"module"}