{"ast":null,"code":"import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\n\nconst isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n  console.log('works');\n\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\n    return false;\n  }\n\n  return true;\n};\n\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\n  var kingCoords = findKingOfColor(chessBoard, colorTurn);\n  var colorCheck = colorTurn === 'l' ? 'd' : 'l';\n\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (isPieceAtPosition(chessBoard, i, j)) {\n        if (chessBoard[i][j].piece.color === colorCheck) {\n          var possibleMoves = getPossibleMoves(chessBoard, i, j);\n\n          if (possibleMoves.some(coord => coord[0] === kingCoords[0] && coord[1] === kingCoords[1])) {\n            console.log(i, j, 'is not valid');\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nconst findKingOfColor = (chessBoard, color) => {\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (chessBoard[i][j].piece !== null) {\n        if (chessBoard[i][j].piece.type === 'k') {\n          if (chessBoard[i][j].piece.color === color) {\n            return [i, j];\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n\n  if (isLocationWithinBounds(toMove)) {\n    if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {\n      var chessPiece = chessBoard[current[0]][current[1]].piece;\n      var newChessBoard = JSON.parse(JSON.stringify(chessBoard));\n      newChessBoard[current[0]][current[1]].piece = {\n        type: null,\n        color: null\n      };\n      newChessBoard[letter][number].piece = chessPiece;\n\n      if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n        possibleMoves.push([letter, number]);\n      }\n    }\n  }\n};\n\nconst isLocationWithinBounds = toMove => {\n  var letter = toMove[0];\n  var number = toMove[1];\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n  }\n\n  return newChessBoard;\n};\n\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves) => {\n  if (isLocationWithinBounds(toMove)) {\n    var letter = toMove[0];\n    var number = toMove[1];\n    var chessPiece = chessBoard[current[0]][current[1]].piece;\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard));\n    newChessBoard[current[0]][current[1]].piece = {\n      type: null,\n      color: null\n    };\n    newChessBoard[letter][number].piece = chessPiece;\n\n    if (!isPieceAtPosition(chessBoard, letter, number)) {\n      if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n        possibleMoves.push([letter, number]);\n        return true;\n      }\n    } else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\n      if (chessPiece.type !== 'p') {\n        if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n          possibleMoves.push([letter, number]);\n          return false;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const checkPositions = [[letter + 2, number - 1], [letter + 2, number + 1], [letter - 2, number - 1], [letter - 2, number + 1], [letter - 1, number - 2], [letter + 1, number - 2], [letter - 1, number + 2], [letter + 1, number + 2]];\n\n  for (var i = 0; i < checkPositions.length; i++) {\n    addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkDiagonals(chessBoard, letter, number, possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves);\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n\n  if (chessBoard[letter][number].piece.color === 'l') {\n    if (number === 2) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves);\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves);\n    } else {\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves);\n  } else {\n    if (number === 7) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves);\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves);\n    } else {\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece);\n  checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece);\n  return possibleMoves;\n};\n\nconst getPossibleMoves = (chessBoard, letter, number) => {\n  var possibleMoves = [];\n\n  switch (chessBoard[letter][number].piece.type) {\n    case null:\n      break;\n\n    case 'k':\n      possibleMoves = getPossibleMovesKing(chessBoard, letter, number);\n      break;\n\n    case 'q':\n      possibleMoves = getPossibleMovesQueen(chessBoard, letter, number);\n      break;\n\n    case 'b':\n      possibleMoves = getPossibleMovesBishop(chessBoard, letter, number);\n      break;\n\n    case 'n':\n      possibleMoves = getPossibleMovesKnight(chessBoard, letter, number);\n      break;\n\n    case 'r':\n      possibleMoves = getPossibleMovesRook(chessBoard, letter, number);\n      break;\n\n    case 'p':\n      possibleMoves = getPossibleMovesPawn(chessBoard, letter, number);\n      break;\n\n    default:\n      break;\n  }\n\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMoves\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["getSpaceUntilMaxLength","isPieceAtPosition","chessBoard","letter","number","piece","type","isEnemyPieceAtPosition","current","toMove","console","log","color","checkValidChessBoard","colorTurn","kingCoords","findKingOfColor","colorCheck","i","j","possibleMoves","getPossibleMoves","some","coord","addCapturablePiecesPawn","isLocationWithinBounds","chessPiece","newChessBoard","JSON","parse","stringify","push","showPossibleMoves","possibleMovesToShow","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","addPossibleMove","checkDiagonals","checkVertHori","getPossibleMovesKnight","checkPositions","getPossibleMovesBishop","getPossibleMovesRook","getPossibleMovesKing","getPossibleMovesPawn","getPossibleMovesQueen"],"mappings":"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","sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\"\r\n\r\nconst isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    console.log('works');\r\n\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\r\n    var kingCoords = findKingOfColor(chessBoard, colorTurn)\r\n    var colorCheck = colorTurn === 'l' ? 'd' : 'l'\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (isPieceAtPosition(chessBoard, i, j)) {\r\n                if (chessBoard[i][j].piece.color === colorCheck) {\r\n                    var possibleMoves = getPossibleMoves(chessBoard, i, j)\r\n                    if (possibleMoves.some(coord => coord[0] === kingCoords[0] && coord[1] === kingCoords[1])) {\r\n                        console.log(i, j, 'is not valid')\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst findKingOfColor = (chessBoard, color) => {\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (chessBoard[i][j].piece !== null) {\r\n                if (chessBoard[i][j].piece.type === 'k') {\r\n                    if (chessBoard[i][j].piece.color === color) {\r\n                        return [i, j]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    if (isLocationWithinBounds(toMove)) {\r\n        if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {        \r\n            var chessPiece = chessBoard[current[0]][current[1]].piece\r\n            var newChessBoard = JSON.parse(JSON.stringify(chessBoard))\r\n            newChessBoard[current[0]][current[1]].piece = {\r\n                type: null,\r\n                color: null,\r\n            }\r\n            newChessBoard[letter][number].piece = chessPiece\r\n\r\n            if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                possibleMoves.push([letter, number])\r\n            }\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nconst isLocationWithinBounds = (toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves) => {\r\n    if (isLocationWithinBounds(toMove)) {\r\n        var letter = toMove[0]\r\n        var number = toMove[1]\r\n    \r\n        var chessPiece = chessBoard[current[0]][current[1]].piece\r\n        var newChessBoard = JSON.parse(JSON.stringify(chessBoard))\r\n        newChessBoard[current[0]][current[1]].piece = {\r\n            type: null,\r\n            color: null,\r\n        }\r\n        newChessBoard[letter][number].piece = chessPiece\r\n        if (!isPieceAtPosition(chessBoard, letter, number)) {\r\n            if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                possibleMoves.push([letter, number])\r\n                return true\r\n            }\r\n        }\r\n        else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\r\n            if (chessPiece.type !== 'p') {\r\n                if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                    possibleMoves.push([letter, number])\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i] , possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const checkPositions = [\r\n        [letter + 2, number - 1], [letter + 2, number + 1], \r\n        [letter - 2, number - 1], [letter - 2, number + 1],\r\n        [letter - 1, number - 2], [letter + 1, number - 2],\r\n        [letter - 1, number + 2], [letter + 1, number + 2]\r\n    ]\r\n\r\n    for (var i = 0; i < checkPositions.length; i++) {\r\n        addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves)\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves)    \r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves)\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    if (chessBoard[letter][number].piece.color === 'l') {\r\n        if (number === 2) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves)\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves) \r\n        } else {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves)\r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves)\r\n    }\r\n    else {\r\n        if (number === 7) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves)\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves) \r\n        } else {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves)\r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves)\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece)\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMoves = (chessBoard, letter, number) => {\r\n    var possibleMoves = []\r\n    switch (chessBoard[letter][number].piece.type) {\r\n        case null:\r\n            break;\r\n        case 'k':\r\n            possibleMoves = getPossibleMovesKing(chessBoard, letter, number)\r\n            break;\r\n        case 'q':\r\n            possibleMoves = getPossibleMovesQueen(chessBoard, letter, number)\r\n            break;\r\n        case 'b':\r\n            possibleMoves = getPossibleMovesBishop(chessBoard, letter, number)\r\n            break;\r\n        case 'n':\r\n            possibleMoves = getPossibleMovesKnight(chessBoard, letter, number)\r\n            break;\r\n        case 'r':\r\n            possibleMoves = getPossibleMovesRook(chessBoard, letter, number)\r\n            break;\r\n        case 'p':\r\n            possibleMoves = getPossibleMovesPawn(chessBoard, letter, number)\r\n            break;\r\n        default:\r\n           break;\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMoves\r\n}"]},"metadata":{},"sourceType":"module"}