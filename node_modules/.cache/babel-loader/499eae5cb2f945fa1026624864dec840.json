{"ast":null,"code":"import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\n\nconst isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\n    return false;\n  }\n\n  return true;\n};\n\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\n  var kingCoords = findKingOfColor(chessBoard, colorTurn);\n  console.log('checking');\n\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (colorTurn == 'l') {\n        if (isPieceAtPosition(chessBoard, i, j)) {\n          if (chessBoard[i][j].piece.color == 'd') {\n            var possibleMoves = getPossibleMoves(chessBoard, i, j, chessBoard[i][j].piece);\n\n            if (possibleMoves.includes(kingCoords)) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nconst findKingOfColor = (chessBoard, color) => {\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (chessBoard[i][j].piece !== null) {\n        if (chessBoard[i][j].piece.type === 'k') {\n          if (chessBoard[i][j].piece.color === color) {\n            return [i, j];\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n\n  if (isLocationWithinBounds(letter, number)) {\n    if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {\n      possibleMoves.push([letter, number]);\n    }\n  }\n};\n\nconst isLocationWithinBounds = toMove => {\n  var letter = toMove[0];\n  var number = toMove[1];\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n    console.log(newChessBoard[letterIndexToShow][numberIndexToShow]);\n  }\n\n  return newChessBoard;\n};\n\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves) => {\n  var letter = toMove[0];\n  var number = toMove[1];\n  var chessPiece = chessBoard[current[0]][current[1]].piece;\n  var newChessBoard = JSON.parse(JSON.stringify(chessBoard));\n  newChessBoard[current[0]][current[1]].piece = {\n    type: null,\n    color: null\n  };\n  newChessBoard[letter][number].piece = chessPiece;\n\n  if (isLocationWithinBounds(letter, number)) {\n    console.log('add move');\n\n    if (!isPieceAtPosition(chessBoard, letter, number)) {\n      if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n        possibleMoves.push([letter, number]);\n        return true;\n      }\n    } else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\n      if (chessPiece.type !== 'p') {\n        if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\n          possibleMoves.push([letter, number]);\n          return false;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const checkPositions = [[letter + 2, number - 1], [letter + 2, number + 1], [letter - 2, number - 1], [letter - 2, number + 1], [letter - 1, number - 2], [letter + 1, number - 2], [letter - 1, number + 2], [letter + 1, number + 2]];\n\n  for (var i = 0; i < checkPositions.length; i++) {\n    addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkDiagonals(chessBoard, letter, number, possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves);\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  if (chessPiece.color === 'l') {\n    if (addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves) && number === 2) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves);\n  } else {\n    if (addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves) && number === 7) {\n      addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves);\n    }\n\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves);\n    addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece);\n  checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece);\n  return possibleMoves;\n};\n\nconst getPossibleMoves = (chessBoard, letter, number, chessPiece) => {\n  var possibleMoves = [];\n\n  switch (chessPiece.type) {\n    case null:\n      break;\n\n    case 'k':\n      possibleMoves = getPossibleMovesKing(chessBoard, letter, number);\n      break;\n\n    case 'q':\n      possibleMoves = getPossibleMovesQueen(chessBoard, letter, number);\n      break;\n\n    case 'b':\n      possibleMoves = getPossibleMovesBishop(chessBoard, letter, number);\n      break;\n\n    case 'n':\n      possibleMoves = getPossibleMovesKnight(chessBoard, letter, number);\n      break;\n\n    case 'r':\n      possibleMoves = getPossibleMovesRook(chessBoard, letter, number);\n      break;\n\n    case 'p':\n      possibleMoves = getPossibleMovesPawn(chessBoard, letter, number);\n      break;\n\n    default:\n      break;\n  }\n\n  console.log(possibleMoves);\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMoves\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["getSpaceUntilMaxLength","isPieceAtPosition","chessBoard","letter","number","piece","type","isEnemyPieceAtPosition","current","toMove","color","checkValidChessBoard","colorTurn","kingCoords","findKingOfColor","console","log","i","j","possibleMoves","getPossibleMoves","includes","addCapturablePiecesPawn","isLocationWithinBounds","push","showPossibleMoves","possibleMovesToShow","newChessBoard","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","addPossibleMove","chessPiece","JSON","parse","stringify","checkDiagonals","checkVertHori","getPossibleMovesKnight","checkPositions","getPossibleMovesBishop","getPossibleMovesRook","getPossibleMovesKing","getPossibleMovesPawn","getPossibleMovesQueen"],"mappings":"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","sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\"\r\n\r\nconst isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isEnemyPieceAtPosition = (chessBoard, current, toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    if (chessBoard[letter][number].piece.color === chessBoard[current[0]][current[1]].piece.color) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\r\n    var kingCoords = findKingOfColor(chessBoard, colorTurn)\r\n\r\n    console.log('checking');\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (colorTurn == 'l') {\r\n                if (isPieceAtPosition(chessBoard, i, j)) {\r\n                    if (chessBoard[i][j].piece.color == 'd') {\r\n                        var possibleMoves = getPossibleMoves(chessBoard, i, j, chessBoard[i][j].piece)\r\n                        if (possibleMoves.includes(kingCoords)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst findKingOfColor = (chessBoard, color) => {\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (chessBoard[i][j].piece !== null) {\r\n                if (chessBoard[i][j].piece.type === 'k') {\r\n                    if (chessBoard[i][j].piece.color === color) {\r\n                        return [i, j]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst addCapturablePiecesPawn = (chessBoard, current, toMove, possibleMoves) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    if (isLocationWithinBounds(letter, number)) {\r\n        if (isEnemyPieceAtPosition(chessBoard, current, toMove)) {\r\n            possibleMoves.push([letter, number])\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nconst isLocationWithinBounds = (toMove) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n        console.log(newChessBoard[letterIndexToShow][numberIndexToShow]); \r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst addPossibleMove = (chessBoard, current, toMove, possibleMoves) => {\r\n    var letter = toMove[0]\r\n    var number = toMove[1]\r\n\r\n    var chessPiece = chessBoard[current[0]][current[1]].piece\r\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard))\r\n    newChessBoard[current[0]][current[1]].piece = {\r\n        type: null,\r\n        color: null\r\n    }\r\n    newChessBoard[letter][number].piece = chessPiece\r\n    if (isLocationWithinBounds(letter, number)) {\r\n    console.log('add move');\r\n\r\n        if (!isPieceAtPosition(chessBoard, letter, number)) {\r\n            if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                possibleMoves.push([letter, number])\r\n                return true    \r\n            }\r\n        }\r\n        else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\r\n            if (chessPiece.type !== 'p') {\r\n                if (checkValidChessBoard(newChessBoard, chessPiece.color)) {\r\n                    possibleMoves.push([letter, number])\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number - i] , possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number - i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter + i, number], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter - i, number], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number + i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, [letter, number], [letter, number - i], possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const checkPositions = [\r\n        [letter + 2, number - 1], [letter + 2, number + 1], \r\n        [letter - 2, number - 1], [letter - 2, number + 1],\r\n        [letter - 1, number - 2], [letter + 1, number - 2],\r\n        [letter - 1, number + 2], [letter + 1, number + 2]\r\n    ]\r\n\r\n    for (var i = 0; i < checkPositions.length; i++) {\r\n        addPossibleMove(chessBoard, [letter, number], checkPositions[i], possibleMoves)\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves)    \r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter + i, number + j], possibleMoves)\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    if (chessPiece.color === 'l') {\r\n        if (addPossibleMove(chessBoard, [letter, number], [letter, number + 1], possibleMoves) && number === 2) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number + 2], possibleMoves) \r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number + 1], possibleMoves)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number + 1], possibleMoves)\r\n    }\r\n    else {\r\n        if (addPossibleMove(chessBoard, [letter, number], [letter, number - 1], possibleMoves) && number === 7) {\r\n            addPossibleMove(chessBoard, [letter, number], [letter, number - 2], possibleMoves) \r\n        }\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter - 1, number - 1], possibleMoves)\r\n        addCapturablePiecesPawn(chessBoard, [letter, number], [letter + 1, number - 1], possibleMoves)\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece)\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMoves = (chessBoard, letter, number, chessPiece) => {\r\n    var possibleMoves = []\r\n    switch (chessPiece.type) {\r\n        case null:\r\n            break;\r\n        case 'k':\r\n            possibleMoves = getPossibleMovesKing(chessBoard, letter, number)\r\n            break;\r\n        case 'q':\r\n            possibleMoves = getPossibleMovesQueen(chessBoard, letter, number)\r\n            break;\r\n        case 'b':\r\n            possibleMoves = getPossibleMovesBishop(chessBoard, letter, number)\r\n            break;\r\n        case 'n':\r\n            possibleMoves = getPossibleMovesKnight(chessBoard, letter, number)\r\n            break;\r\n        case 'r':\r\n            possibleMoves = getPossibleMovesRook(chessBoard, letter, number)\r\n            break;\r\n        case 'p':\r\n            possibleMoves = getPossibleMovesPawn(chessBoard, letter, number)\r\n            break;\r\n        default:\r\n           break;\r\n    }\r\n    console.log(possibleMoves);\r\n    return possibleMoves\r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMoves\r\n}"]},"metadata":{},"sourceType":"module"}