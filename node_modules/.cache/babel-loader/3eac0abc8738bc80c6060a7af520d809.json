{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\";\nimport './ChessApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChessApp;\n\nconst initializeChessBoard = () => {\n  const board = {};\n  const letterIds = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8];\n  var dark = true;\n\n  for (var letter of letterIds) {\n    const squares = {};\n\n    for (var number of numberIds) {\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: null\n      };\n      dark = !dark;\n    }\n\n    dark = !dark;\n    board[letter] = squares;\n  }\n\n  return board;\n};\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()];\n  console.log(chessBoard);\n  console.log(chessBoard['a']['1']);\n  const squarePx = 50;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateRows: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n    },\n    children: Object.keys(chessBoard).map(letter => {\n      var drawCol = 1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n        },\n        children: Object.keys(chessBoard[letter]).map(number => {\n          const styleSquare = {\n            backgroundColor: chessBoard[letter][number].color,\n            gridColStart: drawCol,\n            gridColEnd: drawCol + 1\n          };\n          drawCol++;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styleSquare,\n            children: [letter, number]\n          }, `${letter}${number}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this);\n        })\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ChessBoard;\n\nconst DrawBoard = (chessBoard, squarePx) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateRows: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n    },\n    children: Object.keys(chessBoard).map(letter => {\n      var drawCol = 1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`\n        },\n        children: Object.keys(chessBoard[letter]).map(number => {\n          const styleSquare = {\n            backgroundColor: chessBoard[letter][number].color,\n            gridColStart: drawCol,\n            gridColEnd: drawCol + 1\n          };\n          drawCol++;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styleSquare,\n            children: [letter, number]\n          }, `${letter}${number}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this);\n        })\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = DrawBoard;\nexport default ChessApp;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ChessApp\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"DrawBoard\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["ChessApp","initializeChessBoard","board","letterIds","numberIds","dark","letter","squares","number","color","piece","ChessBoard","chessBoard","setChessBoard","console","log","squarePx","display","gridTemplateRows","Object","keys","map","drawCol","gridTemplateColumns","styleSquare","backgroundColor","gridColStart","gridColEnd","DrawBoard"],"mappings":"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","sourcesContent":["import './ChessApp.css';\n\nconst ChessApp = () => {\n  return (\n    <div>\n      <ChessBoard />\n    </div>\n  )\n}\n\nconst initializeChessBoard = () => {\n  const board = {}\n  const letterIds = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8]\n  var dark = true\n  for (var letter of letterIds) {\n    const squares = {}\n    for (var number of numberIds) {\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: null\n      }\n      dark = !dark\n    }\n    dark = !dark\n    board[letter] = squares\n  }\n  return board\n}\n\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()]\n\n  console.log(chessBoard)\n  console.log(chessBoard['a']['1']);\n\n  const squarePx = 50\n\n  return (\n    <div style={{display:'grid', gridTemplateRows:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n      {Object.keys(chessBoard).map(letter => {\n        var drawCol = 1\n        return (\n          <div key={letter} style={{display:'grid', gridTemplateColumns:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n            {Object.keys(chessBoard[letter]).map(number => {\n              const styleSquare = {\n                backgroundColor: chessBoard[letter][number].color,\n                gridColStart: drawCol,\n                gridColEnd: drawCol + 1\n              }\n              drawCol++\n              return (\n                <div key={`${letter}${number}`} style={styleSquare}>\n                  {letter}{number}\n                </div>\n              )\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst DrawBoard = (chessBoard, squarePx) => {\n  return (\n    <div style={{display:'grid', gridTemplateRows:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n      {Object.keys(chessBoard).map(letter => {\n        var drawCol = 1\n        return (\n          <div key={letter} style={{display:'grid', gridTemplateColumns:`${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px ${squarePx}px`}}>\n            {Object.keys(chessBoard[letter]).map(number => {\n              const styleSquare = {\n                backgroundColor: chessBoard[letter][number].color,\n                gridColStart: drawCol,\n                gridColEnd: drawCol + 1\n              }\n              drawCol++\n              return (\n                <div key={`${letter}${number}`} style={styleSquare}>\n                  {letter}{number}\n                </div>\n              )\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ChessApp"]},"metadata":{},"sourceType":"module"}