{"ast":null,"code":"const isPieceAtPosition = (chessBoard, letterCheck, numberCheck) => {\n  console.log(`${letterCheck}, ${numberCheck}`);\n\n  if (chessBoard[letterCheck][numberCheck].type !== null) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isLocationWithinBounds = (letterCheck, numberCheck) => {\n  return letterCheck >= 1 && letterCheck <= 8 && numberCheck >= 1 && numberCheck <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    chessBoard[letterIndexToShow][numberIndexToShow].chessPiece.canMoveHere = true;\n  }\n};\n\nconst getPossibleMovesKing = () => {\n  const possibleMoves = [];\n  var letter = parseInt(letter);\n  var number = parseInt(number);\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      if (isLocationWithinBounds(letter + i, number + j)) {\n        if (!isPieceAtPosition(letter + i, number + j)) possibleMoves.push([letter + i, number + j]);\n      }\n    }\n  }\n\n  console.log(possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  console.log(letter);\n  var letter = parseInt(letter);\n  var number = parseInt(number);\n  console.log(`${letter}   ${number + 2} `);\n\n  if (number === 2) {\n    if (isLocationWithinBounds(letter, number + 2)) {\n      if (!isPieceAtPosition(letter, number + 2)) {\n        possibleMoves.push([letter, number + 2]);\n      }\n    }\n  }\n\n  if (isLocationWithinBounds(letter, number + 1)) {\n    if (!isPieceAtPosition(letter, number + 1)) {\n      possibleMoves.push([letter, number + 1]);\n    }\n  }\n\n  console.log(possibleMoves);\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMovesKing,\n  getPossibleMovesPawn\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["isPieceAtPosition","chessBoard","letterCheck","numberCheck","console","log","type","isLocationWithinBounds","showPossibleMoves","possibleMovesToShow","i","length","letterIndexToShow","numberIndexToShow","chessPiece","canMoveHere","getPossibleMovesKing","possibleMoves","letter","parseInt","number","j","push","getPossibleMovesPawn"],"mappings":"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","sourcesContent":["const isPieceAtPosition = (chessBoard, letterCheck, numberCheck) => {\r\n    console.log(`${letterCheck}, ${numberCheck}`)\r\n    if (chessBoard[letterCheck][numberCheck].type !== null) {\r\n        return true\r\n    }\r\n    return false\r\n    }\r\n\r\nconst isLocationWithinBounds = (letterCheck, numberCheck) => {\r\n    return ((letterCheck >= 1 && letterCheck <= 8) && (numberCheck >= 1 && numberCheck <= 8))\r\n}\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow) => {\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        chessBoard[letterIndexToShow][numberIndexToShow].chessPiece.canMoveHere = true\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKing = () => {\r\n    const possibleMoves = []\r\n\r\n    var letter = parseInt(letter)\r\n    var number = parseInt(number)\r\n    \r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n        if (isLocationWithinBounds(letter + i, number + j)) {\r\n            if (!isPieceAtPosition(letter + i, number + j))\r\n            possibleMoves.push([letter + i, number + j])\r\n        }\r\n        }\r\n    }\r\n    console.log(possibleMoves)\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    \r\n    console.log( letter)\r\n\r\n    var letter = parseInt(letter)\r\n    var number = parseInt(number)\r\n\r\n    console.log(`${letter}   ${number + 2} `)\r\n\r\n    if (number === 2) {\r\n        if (isLocationWithinBounds(letter, number + 2)) {\r\n        if (!isPieceAtPosition(letter, number + 2)) {\r\n            possibleMoves.push([letter, number + 2])\r\n        }\r\n        }\r\n    }\r\n    if (isLocationWithinBounds(letter, number + 1)) {\r\n        if (!isPieceAtPosition(letter, number + 1)) {\r\n        possibleMoves.push([letter, number + 1])\r\n        }\r\n    }\r\n    console.log(possibleMoves)\r\n    return possibleMoves \r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMovesKing,\r\n    getPossibleMovesPawn\r\n}"]},"metadata":{},"sourceType":"module"}