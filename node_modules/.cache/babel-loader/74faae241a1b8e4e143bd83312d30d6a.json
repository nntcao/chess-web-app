{"ast":null,"code":"import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\n\nconst isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isLocationWithinBounds = (letter, number) => {\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n    console.log(newChessBoard[letterIndexToShow][numberIndexToShow]);\n  }\n\n  return newChessBoard;\n};\n\nconst addPossibleMove = (chessBoard, letter, number, possibleMoves) => {\n  if (isLocationWithinBounds(letter, number)) {\n    if (!isPieceAtPosition(chessBoard, letter, number)) {\n      possibleMoves.push([letter, number]);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number + i, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number + i, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number - i, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number - i, possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst checkVertHori = (chessBoard, letter, number, possibleMoves) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter, number + i, possibleMoves)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter, number - i, possibleMoves)) {\n      break;\n    }\n  }\n};\n\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const checkPositions = [[letter + 2, number - 1], [letter + 2, number + 1], [letter - 2, number - 1], [letter - 2, number + 1], [letter - 1, number - 2], [letter + 1, number - 2], [letter - 1, number + 2], [letter + 1, number + 2]];\n\n  for (var i = 0; i < checkPositions.length; i++) {\n    addPossibleMove(chessBoard, checkPositions[i][0], checkPositions[i][1], possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  checkDiagonals(chessBoard, letter, number, possibleMoves);\n  return possibleMoves;\n};\n\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      addPossibleMove(chessBoard, letter + i, number + j, possibleMoves);\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  if (chessPiece.color === 'l') {\n    if (number === 2) {\n      addPossibleMove(chessBoard, letter, number + 2, possibleMoves);\n    }\n\n    addPossibleMove(chessBoard, letter, number + 1, possibleMoves);\n  } else {\n    if (number === 7) {\n      addPossibleMove(chessBoard, letter, number - 2, possibleMoves);\n    }\n\n    addPossibleMove(chessBoard, letter, number - 1, possibleMoves);\n  }\n\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMovesKing,\n  getPossibleMovesPawn,\n  getPossibleMovesKnight,\n  getPossibleMovesBishop\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["getSpaceUntilMaxLength","isPieceAtPosition","chessBoard","letter","number","piece","type","isLocationWithinBounds","showPossibleMoves","possibleMovesToShow","setChessBoard","newChessBoard","i","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","console","log","addPossibleMove","possibleMoves","push","checkDiagonals","checkVertHori","getPossibleMovesKnight","checkPositions","getPossibleMovesBishop","getPossibleMovesRook","getPossibleMovesKing","j","getPossibleMovesPawn","chessPiece","color"],"mappings":"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","sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\"\r\n\r\nconst isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isLocationWithinBounds = (letter, number) => {\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n        console.log(newChessBoard[letterIndexToShow][numberIndexToShow]); \r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst addPossibleMove = (chessBoard, letter, number, possibleMoves) => {\r\n    if (isLocationWithinBounds(letter, number)) {\r\n        if (!isPieceAtPosition(chessBoard, letter, number)) {\r\n            possibleMoves.push([letter, number])\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number + i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number + i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number - i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number - i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst checkVertHori = (chessBoard, letter, number, possibleMoves) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter, number + i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter, number - i, possibleMoves)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const checkPositions = [\r\n        [letter + 2, number - 1], [letter + 2, number + 1], \r\n        [letter - 2, number - 1], [letter - 2, number + 1],\r\n        [letter - 1, number - 2], [letter + 1, number - 2],\r\n        [letter - 1, number + 2], [letter + 1, number + 2]\r\n    ]\r\n\r\n    for (var i = 0; i < checkPositions.length; i++) {\r\n        addPossibleMove(chessBoard, checkPositions[i][0], checkPositions[i][1], possibleMoves)\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves)    \r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n\r\n\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n            addPossibleMove(chessBoard, letter + i, number + j, possibleMoves)\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    if (chessPiece.color === 'l') {\r\n        if (number === 2) {\r\n            addPossibleMove(chessBoard, letter, number + 2, possibleMoves) \r\n        }\r\n        addPossibleMove(chessBoard, letter, number + 1, possibleMoves) \r\n    }\r\n    else {\r\n        if (number === 7) {\r\n            addPossibleMove(chessBoard, letter, number - 2, possibleMoves) \r\n        }\r\n        addPossibleMove(chessBoard, letter, number - 1, possibleMoves) \r\n    }\r\n\r\n    return possibleMoves \r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMovesKing,\r\n    getPossibleMovesPawn,\r\n    getPossibleMovesKnight,\r\n    getPossibleMovesBishop\r\n}"]},"metadata":{},"sourceType":"module"}