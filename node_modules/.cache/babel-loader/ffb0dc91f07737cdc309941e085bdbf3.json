{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\",\n    _s = $RefreshSig$();\n\nimport './css/ChessApp.css';\nimport { useState } from 'react';\nimport DrawBoard from './components/DrawBoard';\nimport ChessLogicManager from './managers/ChessLogicManager';\nimport InitializerManager from './managers/InitializerManager';\nimport ChessBoardManager from './managers/ChessBoardManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  _s();\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard());\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [squareClicked, setSquareClicked] = useState(null);\n\n  const onPieceClickHandler = (letter, number) => {\n    console.log(letter);\n    letter = parseInt(letter);\n    number = parseInt(number);\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)); // deep clone chessBoard\n\n    console.log(letter);\n    console.log(number);\n    const chessSquare = chessBoard[letter][number];\n    const chessPiece = chessSquare.piece;\n    console.log(squareClicked);\n    console.log([letter, number]);\n\n    if (squareClicked !== null && chessSquare.indicatorMoveHere === true) {\n      newChessBoard[letter][number].piece = chessBoard[squareClicked[0]][squareClicked[1]].piece;\n      newChessBoard[squareClicked[0]][squareClicked[1]].piece = {\n        type: null,\n        color: null\n      };\n      ChessBoardManager.clearBoard(newChessBoard);\n      setIsWhiteTurn(!isWhiteTurn);\n      setChessBoard(newChessBoard);\n      setSquareClicked(null);\n    } else if (JSON.stringify(squareClicked) === JSON.stringify([letter, number])) {} else if (isWhiteTurn && chessPiece.color === 'l' || !isWhiteTurn && chessPiece.color === 'd') {\n      var possibleMoves = [];\n      ChessBoardManager.clearBoard(newChessBoard); // newChessBoard[letter][number].clicked = true\n\n      possibleMoves = ChessLogicManager.getPossibleMoves(newChessBoard, letter, number, chessPiece);\n      newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves);\n      console.log(newChessBoard);\n      setChessBoard(newChessBoard);\n      setSquareClicked([letter, number]);\n    } else if (squareClicked !== null) {\n      console.log('clickedaskljhd');\n      ChessBoardManager.clearBoard(newChessBoard);\n      setChessBoard(newChessBoard);\n      setSquareClicked(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      onPieceClickHandler: onPieceClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChessApp, \"A7M/E+d1B8mkPos4ygi2so1B4Yw=\");\n\n_c = ChessApp;\nexport default ChessApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessApp\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["useState","DrawBoard","ChessLogicManager","InitializerManager","ChessBoardManager","ChessApp","chessBoard","setChessBoard","initializeChessBoard","isWhiteTurn","setIsWhiteTurn","squareClicked","setSquareClicked","onPieceClickHandler","letter","number","console","log","parseInt","newChessBoard","JSON","parse","stringify","chessSquare","chessPiece","piece","indicatorMoveHere","type","color","clearBoard","possibleMoves","getPossibleMoves","showPossibleMoves"],"mappings":"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","sourcesContent":["import './css/ChessApp.css';\n\nimport { useState } from 'react'\nimport DrawBoard from './components/DrawBoard'\nimport ChessLogicManager from './managers/ChessLogicManager'\nimport InitializerManager from './managers/InitializerManager'\nimport ChessBoardManager from './managers/ChessBoardManager'\n\nconst ChessApp = () => {\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard())\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true)\n  const [squareClicked, setSquareClicked] = useState(null)\n\n  const onPieceClickHandler = (letter, number) => {\n    console.log(letter);\n\n    letter = parseInt(letter)\n    number = parseInt(number)\n\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)) // deep clone chessBoard\n\n    console.log(letter);\n    console.log(number);\n\n    const chessSquare = chessBoard[letter][number]\n    const chessPiece = chessSquare.piece\n\n    console.log(squareClicked);\n    console.log([letter, number]);\n\n    if (squareClicked !== null && chessSquare.indicatorMoveHere === true) {\n        newChessBoard[letter][number].piece = chessBoard[squareClicked[0]][squareClicked[1]].piece\n        newChessBoard[squareClicked[0]][squareClicked[1]].piece = {\n          type: null,\n          color: null,\n        }\n        ChessBoardManager.clearBoard(newChessBoard)\n        \n        setIsWhiteTurn(!isWhiteTurn)\n        setChessBoard(newChessBoard)\n        setSquareClicked(null)\n    }\n    else if (JSON.stringify(squareClicked) === JSON.stringify([letter, number]) ) {\n      \n    }\n    else if ((isWhiteTurn && chessPiece.color === 'l') || (!isWhiteTurn && chessPiece.color === 'd')){\n      var possibleMoves = []\n\n      ChessBoardManager.clearBoard(newChessBoard)\n      // newChessBoard[letter][number].clicked = true\n      possibleMoves = ChessLogicManager.getPossibleMoves(newChessBoard, letter, number, chessPiece)\n      newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves)\n      console.log(newChessBoard)\n      setChessBoard(newChessBoard)\n      setSquareClicked([letter, number])\n    }\n    else if (squareClicked !== null) {\n      console.log('clickedaskljhd');\n      ChessBoardManager.clearBoard(newChessBoard)\n      setChessBoard(newChessBoard)\n      setSquareClicked(null)\n    }\n  }\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} onPieceClickHandler={onPieceClickHandler}/>\n    </div>\n  )\n\n}\n\n\nexport default ChessApp\n"]},"metadata":{},"sourceType":"module"}