{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\",\n    _s = $RefreshSig$();\n\nimport './css/ChessApp.css';\nimport { useState } from 'react';\nimport DrawBoard from './components/DrawBoard';\nimport ChessLogicManager from './managers/ChessLogicManager';\nimport InitializerManager from './managers/InitializerManager';\nimport ChessBoardManager from './managers/ChessBoardManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  _s();\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard());\n\n  const onPieceClickHandler = (chessPiece, letter, number) => {\n    letter = parseInt(letter);\n    number = parseInt(number);\n    var possibleMoves = [];\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)); // deep clone chessBoard\n\n    ChessBoardManager.clearBoard(newChessBoard);\n    newChessBoard[letter][number].clicked = true;\n\n    switch (chessPiece.type) {\n      case null:\n        break;\n\n      case 'k':\n        possibleMoves = ChessLogicManager.getPossibleMovesKing(newChessBoard, letter, number, setChessBoard);\n        break;\n\n      case 'q':\n        break;\n\n      case 'b':\n        break;\n\n      case 'n':\n        break;\n\n      case 'r':\n        break;\n\n      case 'p':\n        possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number);\n        newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves);\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(newChessBoard);\n    setChessBoard(newChessBoard);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      onPieceClickHandler: onPieceClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChessApp, \"QdbhT8QWovuVflpvbIhlWF+Cgao=\");\n\n_c = ChessApp;\nexport default ChessApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessApp\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["useState","DrawBoard","ChessLogicManager","InitializerManager","ChessBoardManager","ChessApp","chessBoard","setChessBoard","initializeChessBoard","onPieceClickHandler","chessPiece","letter","number","parseInt","possibleMoves","newChessBoard","JSON","parse","stringify","clearBoard","clicked","type","getPossibleMovesKing","getPossibleMovesPawn","showPossibleMoves","console","log"],"mappings":";;;AAAA,OAAO,oBAAP;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACG,kBAAkB,CAACK,oBAAnB,EAAD,CAA5C;;AAEA,QAAMC,mBAAmB,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,KAAgC;AAE1DD,IAAAA,MAAM,GAAGE,QAAQ,CAACF,MAAD,CAAjB;AACAC,IAAAA,MAAM,GAAGC,QAAQ,CAACD,MAAD,CAAjB;AAEA,QAAIE,aAAa,GAAG,EAApB;AAEA,QAAIC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,UAAf,CAAX,CAApB,CAP0D,CAOC;;AAC3DF,IAAAA,iBAAiB,CAACe,UAAlB,CAA6BJ,aAA7B;AAEAA,IAAAA,aAAa,CAACJ,MAAD,CAAb,CAAsBC,MAAtB,EAA8BQ,OAA9B,GAAwC,IAAxC;;AAEA,YAAQV,UAAU,CAACW,IAAnB;AACE,WAAK,IAAL;AACE;;AACF,WAAK,GAAL;AACEP,QAAAA,aAAa,GAAGZ,iBAAiB,CAACoB,oBAAlB,CAAuCP,aAAvC,EAAsDJ,MAAtD,EAA8DC,MAA9D,EAAsEL,aAAtE,CAAhB;AACA;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACEO,QAAAA,aAAa,GAAGZ,iBAAiB,CAACqB,oBAAlB,CAAuCR,aAAvC,EAAsDJ,MAAtD,EAA8DC,MAA9D,CAAhB;AACAG,QAAAA,aAAa,GAAGb,iBAAiB,CAACsB,iBAAlB,CAAoCT,aAApC,EAAmDD,aAAnD,CAAhB;AACA;;AACF;AACE;AAnBJ;;AAsBAW,IAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AAEAR,IAAAA,aAAa,CAACQ,aAAD,CAAb;AAED,GAtCD;;AAwCA,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,UAAU,EAAET,UAAvB;AAAmC,MAAA,mBAAmB,EAAEG;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjDD;;GAAMJ,Q;;KAAAA,Q;AAoDN,eAAeA,QAAf","sourcesContent":["import './css/ChessApp.css';\n\nimport { useState } from 'react'\nimport DrawBoard from './components/DrawBoard'\nimport ChessLogicManager from './managers/ChessLogicManager'\nimport InitializerManager from './managers/InitializerManager'\nimport ChessBoardManager from './managers/ChessBoardManager'\n\nconst ChessApp = () => {\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard())\n\n  const onPieceClickHandler = (chessPiece, letter, number) => {\n\n    letter = parseInt(letter)\n    number = parseInt(number)\n\n    var possibleMoves = []\n\n    var newChessBoard = JSON.parse(JSON.stringify(chessBoard)) // deep clone chessBoard\n    ChessBoardManager.clearBoard(newChessBoard)\n\n    newChessBoard[letter][number].clicked = true\n\n    switch (chessPiece.type) {\n      case null:\n        break;\n      case 'k':\n        possibleMoves = ChessLogicManager.getPossibleMovesKing(newChessBoard, letter, number, setChessBoard)\n        break;\n      case 'q':\n        break;\n      case 'b':\n        break;\n      case 'n':\n        break;\n      case 'r':\n        break;\n      case 'p':\n        possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number)\n        newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves)\n        break;\n      default:\n        break;\n    }\n\n    console.log(newChessBoard);\n\n    setChessBoard(newChessBoard)\n\n  }\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} onPieceClickHandler={onPieceClickHandler}/>\n    </div>\n  )\n}\n\n\nexport default ChessApp"]},"metadata":{},"sourceType":"module"}