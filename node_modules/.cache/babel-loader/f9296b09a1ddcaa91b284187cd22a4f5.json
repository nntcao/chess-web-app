{"ast":null,"code":"import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\";\n\nconst isPieceAtPosition = (chessBoard, letter, number) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isEnemyPieceAtPosition = (chessBoard, letter, number, piece) => {\n  if (chessBoard[letter][number].piece.type === null) {\n    return false;\n  }\n\n  if (chessBoard[letter][number].piece.color === piece.color) {\n    return false;\n  }\n\n  return true;\n};\n\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\n  var kingCoords = findKingOfColor(chessBoard);\n\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (colorTurn == 'l') {\n        if (isPieceAtPosition(chessBoard, i, j)) {\n          if (chessBoard[i][j].piece.color == 'd') {\n            var possibleMoves = getPossibleMoves(chessBoard, i, j, chessBoard[i][j].piece);\n          }\n        }\n      }\n    }\n  }\n};\n\nconst findKingOfColor = (chessBoard, color) => {\n  for (var i = 1; i <= 8; i++) {\n    for (var j = 1; j <= 8; j++) {\n      if (chessBoard[i][j].piece !== null) {\n        if (chessBoard[i][j].piece.type === 'k') {\n          return [i, j];\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst addCapturablePiecesPawn = (chessBoard, letter, number, possibleMoves, piece) => {\n  if (isLocationWithinBounds(letter, number)) {\n    if (isEnemyPieceAtPosition(chessBoard, letter, number, piece)) {\n      possibleMoves.push([letter, number]);\n    }\n  }\n};\n\nconst isLocationWithinBounds = (letter, number) => {\n  return letter >= 1 && letter <= 8 && number >= 1 && number <= 8;\n};\n\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\n  const newChessBoard = chessBoard;\n\n  for (var i = 0; i < possibleMovesToShow.length; i++) {\n    const letterIndexToShow = possibleMovesToShow[i][0];\n    const numberIndexToShow = possibleMovesToShow[i][1];\n    newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true;\n    console.log(newChessBoard[letterIndexToShow][numberIndexToShow]);\n  }\n\n  return newChessBoard;\n};\n\nconst addPossibleMove = (chessBoard, letter, number, possibleMoves, chessPiece) => {\n  if (isLocationWithinBounds(letter, number)) {\n    if (!isPieceAtPosition(chessBoard, letter, number)) {\n      possibleMoves.push([letter, number]);\n      return true;\n    } else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\n      if (chessPiece.type !== 'p') {\n        possibleMoves.push([letter, number]);\n        return false;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves, chessPiece) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number + i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number + i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number - i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number - i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n};\n\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter + i, number, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter - i, number, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter, number + i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n\n  for (var i = 1; i <= 7; i++) {\n    if (!addPossibleMove(chessBoard, letter, number - i, possibleMoves, chessPiece)) {\n      break;\n    }\n  }\n};\n\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const checkPositions = [[letter + 2, number - 1], [letter + 2, number + 1], [letter - 2, number - 1], [letter - 2, number + 1], [letter - 1, number - 2], [letter + 1, number - 2], [letter - 1, number + 2], [letter + 1, number + 2]];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  for (var i = 0; i < checkPositions.length; i++) {\n    addPossibleMove(chessBoard, checkPositions[i][0], checkPositions[i][1], possibleMoves, chessPiece);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece);\n  return possibleMoves;\n};\n\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece);\n  return possibleMoves;\n};\n\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      addPossibleMove(chessBoard, letter + i, number + j, possibleMoves, chessPiece);\n    }\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n\n  if (chessPiece.color === 'l') {\n    if (addPossibleMove(chessBoard, letter, number + 1, possibleMoves, chessPiece) && number === 2) {\n      addPossibleMove(chessBoard, letter, number + 2, possibleMoves, chessPiece);\n    }\n\n    addCapturablePiecesPawn(chessBoard, letter - 1, number + 1, possibleMoves, chessPiece);\n    addCapturablePiecesPawn(chessBoard, letter + 1, number + 1, possibleMoves, chessPiece);\n  } else {\n    if (addPossibleMove(chessBoard, letter, number - 1, possibleMoves, chessPiece) && number === 7) {\n      addPossibleMove(chessBoard, letter, number - 2, possibleMoves, chessPiece);\n    }\n\n    addCapturablePiecesPawn(chessBoard, letter - 1, number - 1, possibleMoves, chessPiece);\n    addCapturablePiecesPawn(chessBoard, letter + 1, number - 1, possibleMoves, chessPiece);\n  }\n\n  return possibleMoves;\n};\n\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\n  const possibleMoves = [];\n  const chessPiece = chessBoard[letter][number].piece;\n  checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece);\n  checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece);\n  return possibleMoves;\n};\n\nconst getPossibleMoves = (chessBoard, letter, number, chessPiece) => {\n  var possibleMoves = [];\n\n  switch (chessPiece.type) {\n    case null:\n      break;\n\n    case 'k':\n      possibleMoves = getPossibleMovesKing(chessBoard, letter, number);\n      break;\n\n    case 'q':\n      possibleMoves = getPossibleMovesQueen(chessBoard, letter, number);\n      break;\n\n    case 'b':\n      possibleMoves = getPossibleMovesBishop(chessBoard, letter, number);\n      break;\n\n    case 'n':\n      possibleMoves = getPossibleMovesKnight(chessBoard, letter, number);\n      break;\n\n    case 'r':\n      possibleMoves = getPossibleMovesRook(chessBoard, letter, number);\n      break;\n\n    case 'p':\n      possibleMoves = getPossibleMovesPawn(chessBoard, letter, number);\n      break;\n\n    default:\n      break;\n  }\n\n  return possibleMoves;\n};\n\nexport default {\n  showPossibleMoves,\n  getPossibleMoves\n};","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/managers/ChessLogicManager.js"],"names":["getSpaceUntilMaxLength","isPieceAtPosition","chessBoard","letter","number","piece","type","isEnemyPieceAtPosition","color","checkValidChessBoard","colorTurn","kingCoords","findKingOfColor","i","j","possibleMoves","getPossibleMoves","addCapturablePiecesPawn","isLocationWithinBounds","push","showPossibleMoves","possibleMovesToShow","setChessBoard","newChessBoard","length","letterIndexToShow","numberIndexToShow","indicatorMoveHere","console","log","addPossibleMove","chessPiece","checkDiagonals","checkVertHori","getPossibleMovesKnight","checkPositions","getPossibleMovesBishop","getPossibleMovesRook","getPossibleMovesKing","getPossibleMovesPawn","getPossibleMovesQueen"],"mappings":"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","sourcesContent":["import { getSpaceUntilMaxLength } from \"@testing-library/user-event/dist/utils\"\r\n\r\nconst isPieceAtPosition = (chessBoard, letter, number) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst isEnemyPieceAtPosition = (chessBoard, letter, number, piece) => {\r\n    if (chessBoard[letter][number].piece.type === null) {\r\n        return false\r\n    }\r\n    if (chessBoard[letter][number].piece.color === piece.color) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst checkValidChessBoard = (chessBoard, colorTurn) => {\r\n    var kingCoords = findKingOfColor(chessBoard, )\r\n\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (colorTurn == 'l') {\r\n                if (isPieceAtPosition(chessBoard, i, j)) {\r\n                    if (chessBoard[i][j].piece.color == 'd') {\r\n                        var possibleMoves = getPossibleMoves(chessBoard, i, j, chessBoard[i][j].piece)\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst findKingOfColor = (chessBoard, color) => {\r\n    for (var i = 1; i <= 8; i++) {\r\n        for (var j = 1; j <= 8; j++) {\r\n            if (chessBoard[i][j].piece !== null) {\r\n                if (chessBoard[i][j].piece.type === 'k') {\r\n                    return [i, j]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst addCapturablePiecesPawn = (chessBoard, letter, number, possibleMoves, piece) => {\r\n    if (isLocationWithinBounds(letter, number)) {\r\n        if (isEnemyPieceAtPosition(chessBoard, letter, number, piece)) {\r\n            possibleMoves.push([letter, number])\r\n        }\r\n    }    \r\n}\r\n\r\n\r\nconst isLocationWithinBounds = (letter, number) => {\r\n    return ((letter >= 1) && (letter <= 8)) && ((number >= 1) && (number <= 8))\r\n}\r\n\r\n\r\nconst showPossibleMoves = (chessBoard, possibleMovesToShow, setChessBoard) => {\r\n    const newChessBoard = chessBoard\r\n    for (var i = 0; i < possibleMovesToShow.length; i++) {\r\n        const letterIndexToShow = possibleMovesToShow[i][0]\r\n        const numberIndexToShow = possibleMovesToShow[i][1]\r\n\r\n        newChessBoard[letterIndexToShow][numberIndexToShow].indicatorMoveHere = true\r\n        console.log(newChessBoard[letterIndexToShow][numberIndexToShow]); \r\n    }\r\n    return newChessBoard\r\n}\r\n\r\nconst addPossibleMove = (chessBoard, letter, number, possibleMoves, chessPiece) => {\r\n    if (isLocationWithinBounds(letter, number)) {\r\n        if (!isPieceAtPosition(chessBoard, letter, number)) {\r\n            possibleMoves.push([letter, number])\r\n            return true\r\n        }\r\n        else if (chessPiece.color !== chessBoard[letter][number].piece.color) {\r\n            if (chessPiece.type !== 'p') {\r\n                possibleMoves.push([letter, number])\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst checkDiagonals = (chessBoard, letter, number, possibleMoves, chessPiece) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number + i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number + i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number - i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number - i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst checkVertHori = (chessBoard, letter, number, possibleMoves, chessPiece) => {\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter + i, number, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter - i, number, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter, number + i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n    for (var i = 1; i <= 7; i++) {\r\n        if (!addPossibleMove(chessBoard, letter, number - i, possibleMoves, chessPiece)) {\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nconst getPossibleMovesKnight = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const checkPositions = [\r\n        [letter + 2, number - 1], [letter + 2, number + 1], \r\n        [letter - 2, number - 1], [letter - 2, number + 1],\r\n        [letter - 1, number - 2], [letter + 1, number - 2],\r\n        [letter - 1, number + 2], [letter + 1, number + 2]\r\n    ]\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    for (var i = 0; i < checkPositions.length; i++) {\r\n        addPossibleMove(chessBoard, checkPositions[i][0], checkPositions[i][1], possibleMoves, chessPiece)\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesBishop = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece)    \r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesRook = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMovesKing = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    for (var i = -1; i <= 1; i++) {\r\n        for (var j = -1; j <= 1; j++) {\r\n            addPossibleMove(chessBoard, letter + i, number + j, possibleMoves, chessPiece)\r\n        }\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesPawn = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    if (chessPiece.color === 'l') {\r\n        if (addPossibleMove(chessBoard, letter, number + 1, possibleMoves, chessPiece) && number === 2) {\r\n            addPossibleMove(chessBoard, letter, number + 2, possibleMoves, chessPiece) \r\n        }\r\n        addCapturablePiecesPawn(chessBoard, letter - 1, number + 1, possibleMoves, chessPiece)\r\n        addCapturablePiecesPawn(chessBoard, letter + 1, number + 1, possibleMoves, chessPiece)\r\n    }\r\n    else {\r\n        if (addPossibleMove(chessBoard, letter, number - 1, possibleMoves, chessPiece) && number === 7) {\r\n            addPossibleMove(chessBoard, letter, number - 2, possibleMoves, chessPiece) \r\n        }\r\n        addCapturablePiecesPawn(chessBoard, letter - 1, number - 1, possibleMoves, chessPiece)\r\n        addCapturablePiecesPawn(chessBoard, letter + 1, number - 1, possibleMoves, chessPiece)\r\n    }\r\n    return possibleMoves \r\n}\r\n\r\nconst getPossibleMovesQueen = (chessBoard, letter, number) => {\r\n    const possibleMoves = []\r\n    const chessPiece = chessBoard[letter][number].piece\r\n\r\n    checkVertHori(chessBoard, letter, number, possibleMoves, chessPiece)\r\n    checkDiagonals(chessBoard, letter, number, possibleMoves, chessPiece)\r\n\r\n    return possibleMoves\r\n}\r\n\r\nconst getPossibleMoves = (chessBoard, letter, number, chessPiece) => {\r\n    var possibleMoves = []\r\n    switch (chessPiece.type) {\r\n        case null:\r\n            break;\r\n        case 'k':\r\n            possibleMoves = getPossibleMovesKing(chessBoard, letter, number)\r\n            break;\r\n        case 'q':\r\n            possibleMoves = getPossibleMovesQueen(chessBoard, letter, number)\r\n            break;\r\n        case 'b':\r\n            possibleMoves = getPossibleMovesBishop(chessBoard, letter, number)\r\n            break;\r\n        case 'n':\r\n            possibleMoves = getPossibleMovesKnight(chessBoard, letter, number)\r\n            break;\r\n        case 'r':\r\n            possibleMoves = getPossibleMovesRook(chessBoard, letter, number)\r\n            break;\r\n        case 'p':\r\n            possibleMoves = getPossibleMovesPawn(chessBoard, letter, number)\r\n            break;\r\n        default:\r\n           break;\r\n    }\r\n    return possibleMoves\r\n}\r\n\r\nexport default {\r\n    showPossibleMoves,\r\n    getPossibleMoves\r\n}"]},"metadata":{},"sourceType":"module"}