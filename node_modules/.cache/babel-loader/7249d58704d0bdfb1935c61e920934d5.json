{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\",\n    _s = $RefreshSig$();\n\nimport './ChessApp.css';\nimport react, { useState, useEffect } from 'react';\nimport DrawBoard from './components/DrawBoard';\nimport ChessLogicManager from './managers/ChessLogicManager';\nimport InitializerManager from './managers/InitializerManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChessApp = () => {\n  _s();\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard());\n\n  const onPieceClickHandler = (chessPiece, letter, number) => {\n    letter = parseInt(letter);\n    number = parseInt(number);\n    var possibleMoves = [];\n    var newChessBoard = chessBoard;\n    newChessBoard[letter][number].clicked = true;\n\n    switch (chessPiece.type) {\n      case null:\n        break;\n\n      case 'k':\n        possibleMoves = ChessLogicManager.getPossibleMovesKing(chessBoard, letter, number, setChessBoard);\n        break;\n\n      case 'q':\n        break;\n\n      case 'b':\n        break;\n\n      case 'n':\n        break;\n\n      case 'r':\n        break;\n\n      case 'p':\n        possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number);\n        newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves);\n        break;\n\n      default:\n        break;\n    }\n\n    setChessBoard(newChessBoard);\n    console.log(letter, number, chessPiece);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      onPieceClickHandler: onPieceClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChessApp, \"QdbhT8QWovuVflpvbIhlWF+Cgao=\");\n\n_c = ChessApp;\nexport default ChessApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessApp\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["react","useState","useEffect","DrawBoard","ChessLogicManager","InitializerManager","ChessApp","chessBoard","setChessBoard","initializeChessBoard","onPieceClickHandler","chessPiece","letter","number","parseInt","possibleMoves","newChessBoard","clicked","type","getPossibleMovesKing","getPossibleMovesPawn","showPossibleMoves","console","log"],"mappings":";;;AAAA,OAAO,gBAAP;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACI,kBAAkB,CAACI,oBAAnB,EAAD,CAA5C;;AAEA,QAAMC,mBAAmB,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,KAAgC;AAE1DD,IAAAA,MAAM,GAAGE,QAAQ,CAACF,MAAD,CAAjB;AACAC,IAAAA,MAAM,GAAGC,QAAQ,CAACD,MAAD,CAAjB;AAEA,QAAIE,aAAa,GAAG,EAApB;AAEA,QAAIC,aAAa,GAAGT,UAApB;AAEAS,IAAAA,aAAa,CAACJ,MAAD,CAAb,CAAsBC,MAAtB,EAA8BI,OAA9B,GAAwC,IAAxC;;AAEA,YAAQN,UAAU,CAACO,IAAnB;AACE,WAAK,IAAL;AACE;;AACF,WAAK,GAAL;AACEH,QAAAA,aAAa,GAAGX,iBAAiB,CAACe,oBAAlB,CAAuCZ,UAAvC,EAAmDK,MAAnD,EAA2DC,MAA3D,EAAmEL,aAAnE,CAAhB;AACA;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACE;;AACF,WAAK,GAAL;AACEO,QAAAA,aAAa,GAAGX,iBAAiB,CAACgB,oBAAlB,CAAuCJ,aAAvC,EAAsDJ,MAAtD,EAA8DC,MAA9D,CAAhB;AACAG,QAAAA,aAAa,GAAGZ,iBAAiB,CAACiB,iBAAlB,CAAoCL,aAApC,EAAmDD,aAAnD,CAAhB;AACA;;AACF;AACE;AAnBJ;;AAsBAP,IAAAA,aAAa,CAACQ,aAAD,CAAb;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ,EAAoBC,MAApB,EAA4BF,UAA5B;AAED,GApCD;;AAsCA,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,UAAU,EAAEJ,UAAvB;AAAmC,MAAA,mBAAmB,EAAEG;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/CD;;GAAMJ,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf","sourcesContent":["import './ChessApp.css';\n\nimport react, { useState, useEffect } from 'react'\nimport DrawBoard from './components/DrawBoard'\nimport ChessLogicManager from './managers/ChessLogicManager'\nimport InitializerManager from './managers/InitializerManager'\n\nconst ChessApp = () => {\n\n  const [chessBoard, setChessBoard] = useState(InitializerManager.initializeChessBoard())\n\n  const onPieceClickHandler = (chessPiece, letter, number) => {\n\n    letter = parseInt(letter)\n    number = parseInt(number)\n\n    var possibleMoves = []\n\n    var newChessBoard = chessBoard\n\n    newChessBoard[letter][number].clicked = true\n\n    switch (chessPiece.type) {\n      case null:\n        break;\n      case 'k':\n        possibleMoves = ChessLogicManager.getPossibleMovesKing(chessBoard, letter, number, setChessBoard)\n        break;\n      case 'q':\n        break;\n      case 'b':\n        break;\n      case 'n':\n        break;\n      case 'r':\n        break;\n      case 'p':\n        possibleMoves = ChessLogicManager.getPossibleMovesPawn(newChessBoard, letter, number)\n        newChessBoard = ChessLogicManager.showPossibleMoves(newChessBoard, possibleMoves)\n        break;\n      default:\n        break;\n    }\n\n    setChessBoard(newChessBoard)\n    console.log(letter, number, chessPiece);\n\n  }\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} onPieceClickHandler={onPieceClickHandler}/>\n    </div>\n  )\n}\n\n\nexport default ChessApp"]},"metadata":{},"sourceType":"module"}