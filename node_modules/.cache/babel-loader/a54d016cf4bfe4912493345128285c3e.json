{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nntca\\\\Desktop\\\\proj\\\\chess-web-app\\\\src\\\\ChessApp.js\";\nimport './ChessApp.css';\nimport react from 'react';\nimport kinglight from './images/Chess_klt45.svg';\nimport kingdark from './images/Chess_kdt45.svg';\nimport queenlight from './images/Chess_qlt45.svg';\nimport queendark from './images/Chess_qdt45.svg';\nimport bishoplight from './images/Chess_blt45.svg';\nimport bishopdark from './images/Chess_bdt45.svg';\nimport knightlight from './images/Chess_nlt45.svg';\nimport knightdark from './images/Chess_ndt45.svg';\nimport rooklight from './images/Chess_rlt45.svg';\nimport rookdark from './images/Chess_rdt45.svg';\nimport pawnlight from './images/Chess_plt45.svg';\nimport pawndark from './images/Chess_pdt45.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pieceImages = {\n  kl: kinglight,\n  kd: kingdark,\n  ql: queenlight,\n  qd: queendark,\n  bl: bishoplight,\n  bd: bishopdark,\n  nl: knightlight,\n  nd: knightdark,\n  rl: rooklight,\n  rd: rookdark,\n  pl: pawnlight,\n  pd: pawndark\n};\nconst initialPieces = {\n  1: 'r',\n  2: 'n',\n  3: 'b',\n  4: 'q',\n  5: 'k',\n  6: 'b',\n  7: 'n',\n  8: 'r'\n};\n\nconst ChessApp = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChessBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChessApp;\n\nconst initializeChessBoard = () => {\n  const board = {};\n  const letterIds = [1, 2, 3, 4, 5, 6, 7, 8]; // 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'\n\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8];\n  var dark = true;\n\n  for (var letter of letterIds) {\n    const squares = {};\n\n    for (var number of numberIds) {\n      var colorPiece = null;\n      var typePiece = null;\n\n      if (number === 1 || number === 2) {\n        colorPiece = 'l';\n\n        if (number === 1 || number === 8) {\n          typePiece = initialPieces[letter];\n        } else {\n          typePiece = 'p';\n        }\n      } else if (number === 7 || number === 8) {\n        colorPiece = 'd';\n\n        if (number === 1 || number === 8) {\n          typePiece = initialPieces[letter];\n        } else {\n          typePiece = 'p';\n        }\n      }\n\n      var pickedPiece = {\n        type: typePiece,\n        color: colorPiece\n      };\n      console.log(pickedPiece);\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: pickedPiece // piece: null\n        // piece: {\n        //   type: 'q',\n        //   color: 'l'\n        // }\n\n      };\n      dark = !dark;\n    }\n\n    dark = !dark;\n    board[letter] = squares;\n  }\n\n  return board;\n};\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()];\n  console.log(chessBoard);\n  const squarePx = 75;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DrawBoard, {\n      chessBoard: chessBoard,\n      squarePx: squarePx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ChessBoard;\n\nconst DrawBoard = _ref => {\n  let {\n    chessBoard,\n    squarePx\n  } = _ref;\n  const WIDTH = window.width;\n  const styleBoard = {\n    width: '80%',\n    position: 'absolute',\n    margin: 'auto',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styleBoard,\n    children: /*#__PURE__*/_jsxDEV(DrawRows, {\n      chessBoard: chessBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = DrawBoard;\n\nconst DrawRows = _ref2 => {\n  let {\n    chessBoard,\n    squarePx\n  } = _ref2;\n  const rowStyles = {\n    display: 'grid',\n    gridTemplateColumns: '12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%',\n    height: '100%',\n    width: '100%'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: rowStyles,\n    children: Object.keys(chessBoard).map(letter => /*#__PURE__*/_jsxDEV(DrawColumns, {\n      letter: letter,\n      chessBoard: chessBoard\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 46\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = DrawRows;\n\nconst DrawColumns = _ref3 => {\n  let {\n    letter,\n    chessBoard,\n    squarePx\n  } = _ref3;\n  var columnCounter = 1;\n  const columnStyles = {\n    display: 'grid',\n    gridTemplateRows: '12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%',\n    gridTemplateColumns: '100%'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: columnStyles,\n    children: Object.keys(chessBoard[letter]).slice(0).reverse().map(number => {\n      const squareStyle = {\n        backgroundColor: chessBoard[letter][number].color,\n        gridColStart: columnCounter,\n        gridColEnd: columnCounter + 1,\n        display: 'block',\n        position: 'relative'\n      };\n      columnCounter++;\n      return /*#__PURE__*/_jsxDEV(DrawSquare, {\n        letter: letter,\n        number: number,\n        squareStyle: squareStyle,\n        chessBoard: chessBoard\n      }, `${letter}${number}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = DrawColumns;\n\nconst DrawSquare = _ref4 => {\n  let {\n    letter,\n    number,\n    squareStyle,\n    chessBoard\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: squareStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {},\n      children: [letter, number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DrawChessPiece, {\n      letter: letter,\n      number: number,\n      chessBoard: chessBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_c6 = DrawSquare;\n\nconst DrawChessPiece = _ref5 => {\n  let {\n    letter,\n    number,\n    chessBoard\n  } = _ref5;\n  const chessPiece = chessBoard[letter][number].piece;\n\n  if (chessPiece.type === null || chessPiece.color === null) {\n    return null;\n  }\n\n  const imageDivStyle = {\n    display: \"flex\",\n    objectFit: \"cover\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: '100%',\n    minHeight: '100%'\n  };\n  const imageStyle = {\n    flexShrink: 0,\n    minWidth: '100%',\n    minHeight: '100%'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: imageDivStyle,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pieceImages[`${chessPiece.type}${chessPiece.color}`],\n      style: imageStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n_c7 = DrawChessPiece;\nexport default ChessApp;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ChessApp\");\n$RefreshReg$(_c2, \"ChessBoard\");\n$RefreshReg$(_c3, \"DrawBoard\");\n$RefreshReg$(_c4, \"DrawRows\");\n$RefreshReg$(_c5, \"DrawColumns\");\n$RefreshReg$(_c6, \"DrawSquare\");\n$RefreshReg$(_c7, \"DrawChessPiece\");","map":{"version":3,"sources":["C:/Users/nntca/Desktop/proj/chess-web-app/src/ChessApp.js"],"names":["react","kinglight","kingdark","queenlight","queendark","bishoplight","bishopdark","knightlight","knightdark","rooklight","rookdark","pawnlight","pawndark","pieceImages","kl","kd","ql","qd","bl","bd","nl","nd","rl","rd","pl","pd","initialPieces","ChessApp","initializeChessBoard","board","letterIds","numberIds","dark","letter","squares","number","colorPiece","typePiece","pickedPiece","type","color","console","log","piece","ChessBoard","chessBoard","setChessBoard","squarePx","DrawBoard","WIDTH","window","width","styleBoard","position","margin","top","bottom","left","right","DrawRows","rowStyles","display","gridTemplateColumns","height","Object","keys","map","DrawColumns","columnCounter","columnStyles","gridTemplateRows","slice","reverse","squareStyle","backgroundColor","gridColStart","gridColEnd","DrawSquare","DrawChessPiece","chessPiece","imageDivStyle","objectFit","justifyContent","alignItems","overflow","minWidth","minHeight","imageStyle","flexShrink"],"mappings":"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","sourcesContent":["import './ChessApp.css';\n\nimport react from 'react'\n\nimport kinglight from './images/Chess_klt45.svg'\nimport kingdark from './images/Chess_kdt45.svg'\nimport queenlight from './images/Chess_qlt45.svg'\nimport queendark from './images/Chess_qdt45.svg'\nimport bishoplight from './images/Chess_blt45.svg'\nimport bishopdark from './images/Chess_bdt45.svg'\nimport knightlight from './images/Chess_nlt45.svg'\nimport knightdark from './images/Chess_ndt45.svg'\nimport rooklight from './images/Chess_rlt45.svg'\nimport rookdark from './images/Chess_rdt45.svg'\nimport pawnlight from './images/Chess_plt45.svg'\nimport pawndark from './images/Chess_pdt45.svg'\n\n\nconst pieceImages = {\n  kl: kinglight,\n  kd: kingdark,\n  ql: queenlight,\n  qd: queendark,\n  bl: bishoplight,\n  bd: bishopdark,\n  nl: knightlight,\n  nd: knightdark,\n  rl: rooklight,\n  rd: rookdark,\n  pl: pawnlight,\n  pd: pawndark \n}\n\nconst initialPieces = {\n  1: 'r',\n  2: 'n',\n  3: 'b',\n  4: 'q',\n  5: 'k',\n  6: 'b',\n  7: 'n',\n  8: 'r'\n}\n\nconst ChessApp = () => {\n  return (\n    <div>\n      <ChessBoard />\n    </div>\n  )\n}\n\nconst initializeChessBoard = () => {\n  const board = {}\n  const letterIds = [1, 2, 3, 4, 5, 6, 7, 8]\n  // 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'\n  const numberIds = [1, 2, 3, 4, 5, 6, 7, 8]\n  var dark = true\n  for (var letter of letterIds) {\n    const squares = {}\n    for (var number of numberIds) {\n      var colorPiece = null\n      var typePiece = null\n\n      if (number === 1 || number === 2) {\n        colorPiece = 'l'\n        if (number === 1 || number === 8) {\n          typePiece = initialPieces[letter]\n        }\n        else {\n          typePiece = 'p'\n        }\n      }\n      else if (number === 7 || number === 8) {\n        colorPiece = 'd'\n        if (number === 1 || number === 8) {\n          typePiece = initialPieces[letter]\n        }\n        else {\n          typePiece = 'p'\n        }\n      }\n\n      var pickedPiece = {\n        type: typePiece,\n        color: colorPiece\n      }\n      console.log(pickedPiece);\n\n      squares[number] = {\n        color: dark ? 'darkGray' : 'lightGray',\n        piece: pickedPiece\n        // piece: null\n        // piece: {\n        //   type: 'q',\n        //   color: 'l'\n        // }\n      }\n      dark = !dark\n    }\n    dark = !dark\n    board[letter] = squares\n  }\n  return board\n}\n\n\nconst ChessBoard = () => {\n  const [chessBoard, setChessBoard] = [initializeChessBoard()]\n\n  console.log(chessBoard)\n\n  const squarePx = 75\n\n  return (\n    <div>\n      <DrawBoard chessBoard={chessBoard} squarePx={squarePx}/>\n    </div>\n  )\n}\n\nconst DrawBoard = ({ chessBoard, squarePx }) => {\n  const WIDTH = window.width\n  const styleBoard = {\n    width: '80%',\n    position: 'absolute',\n    margin: 'auto',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  }\n\n\n  return (\n    <div style={styleBoard}>\n      <DrawRows chessBoard={chessBoard} />\n    </div>\n  )\n}\n\nconst DrawRows = ({ chessBoard, squarePx }) => {\n  const rowStyles = {\n    display:'grid', \n    gridTemplateColumns:'12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%',\n    height: '100%',\n    width: '100%'\n  }\n  return (\n    <div style={rowStyles}>\n      {Object.keys(chessBoard).map(letter => <DrawColumns key={letter} letter={letter} chessBoard={chessBoard}/>)}\n    </div>\n  )\n}\n\nconst DrawColumns = ({ letter, chessBoard, squarePx }) => {\n  var columnCounter = 1\n  const columnStyles = {\n    display:'grid', \n    gridTemplateRows:'12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%',\n    gridTemplateColumns: '100%'\n  }\n  return (\n    <div style={columnStyles}>\n      {Object.keys(chessBoard[letter]).slice(0).reverse().map(number => {\n        const squareStyle = {\n          backgroundColor: chessBoard[letter][number].color,\n          gridColStart: columnCounter,\n          gridColEnd: columnCounter + 1,\n          display: 'block',\n          position: 'relative'\n        }\n        columnCounter++\n        return <DrawSquare key={`${letter}${number}`} letter={letter} number={number} squareStyle={squareStyle} chessBoard={chessBoard}/>\n      })}\n    </div>\n  )\n}\n\nconst DrawSquare = ({ letter, number, squareStyle, chessBoard }) => {\n  return (\n    <div style={squareStyle}>\n      <div style={{}}>\n        {letter}{number}\n      </div>\n      <DrawChessPiece letter={letter} number={number} chessBoard={chessBoard}/>\n    </div>\n  )\n}\n\nconst DrawChessPiece = ({ letter, number, chessBoard }) => {\n  const chessPiece = chessBoard[letter][number].piece\n  \n  if (chessPiece.type === null || chessPiece.color === null) {\n    return null\n  }\n\n  const imageDivStyle = {\n    display: \"flex\",\n    objectFit: \"cover\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: '100%',\n    minHeight: '100%'\n  }\n\n  const imageStyle = {\n    flexShrink: 0,\n    minWidth: '100%',\n    minHeight: '100%'\n  }\n\n  return (\n    <div style={imageDivStyle}>\n      <img src={pieceImages[`${chessPiece.type}${chessPiece.color}`]} style={imageStyle} />\n    </div>\n  )\n}\n\nexport default ChessApp"]},"metadata":{},"sourceType":"module"}